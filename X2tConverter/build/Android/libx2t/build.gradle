apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {

    buildToolsVersion '30.0.2'
    compileSdkVersion 30

    defaultConfig {

        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName '1.0'

        buildConfigField "String", "LIB_X2T", "\"$NAME_LIB\""

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_TOOLCHAIN=clang",
                          "-DANDROID_STL=c++_static",
                          "-DANDROID_ARM_NEON=TRUE",
                          "-DARG_PATH_LIB_BUILD_TOOLS=${getProjectPath(PATH_LIB_BUILD_TOOLS)}",
                          "-DARG_PATH_LIB_DST=${getProjectPath(PATH_LIB_DST, true)}",
                          "-DARG_PATH_SRC_CORE=${getProjectPath(PATH_SRC_CORE)}",
                          "-DARG_NAME_LIB=$NAME_LIB",
                          "-DARG_NAME_LIB_DJVUFILE=$NAME_LIB_DJVUFILE",
                          "-DARG_NAME_LIB_DOCTRENDERER=$NAME_LIB_DOCTRENDERER",
                          "-DARG_NAME_LIB_GRAPHICS=$NAME_LIB_GRAPHICS",
                          "-DARG_NAME_LIB_HTMLFILE=$NAME_LIB_HTMLFILE",
                          "-DARG_NAME_LIB_HTMLRENDERER=$NAME_LIB_HTMLRENDERER",
                          "-DARG_NAME_LIB_KERNEL=$NAME_LIB_KERNEL",
                          "-DARG_NAME_LIB_PDFREADER=$NAME_LIB_PDFREADER",
                          "-DARG_NAME_LIB_PDFWRITER=$NAME_LIB_PDFWRITER",
                          "-DARG_NAME_LIB_UNICODECONVERTER=$NAME_LIB_UNICODECONVERTER",
                          "-DARG_NAME_LIB_X2T=$NAME_LIB_X2T",
                          "-DARG_NAME_LIB_XPSFILE=$NAME_LIB_XPSFILE",
                          "-DARG_NAME_LIB_FB2FILE=$NAME_LIB_FB2FILE",
                          "-DARG_NAME_LIB_EPUBFILE=$NAME_LIB_EPUBFILE"
            }
        }

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            debuggable true
            jniDebuggable true
        }
    }

    sourceSets {
        main {
            java.srcDirs = [
                "src/main/java"
            ]

            jni.srcDirs = [
                "src/main/cpp"
            ]

            jniLibs.srcDirs = [
                PATH_LIB_DST,
                PATH_LIB_BUILD_TOOLS
            ]
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        ['armeabi-v7a', 'x86' ,'arm64-v8a',  'x86_64' ].each { abi ->
            pickFirst "lib/$abi/lib${NAME_LIB_DJVUFILE}.so"
            pickFirst "lib/$abi/lib${NAME_LIB_DOCTRENDERER}.so"
            pickFirst "lib/$abi/lib${NAME_LIB_GRAPHICS}.so"
            pickFirst "lib/$abi/lib${NAME_LIB_HTMLFILE}.so"
            pickFirst "lib/$abi/lib${NAME_LIB_HTMLRENDERER}.so"
            pickFirst "lib/$abi/lib${NAME_LIB_KERNEL}.so"
            pickFirst "lib/$abi/lib${NAME_LIB_PDFREADER}.so"
            pickFirst "lib/$abi/lib${NAME_LIB_PDFWRITER}.so"
            pickFirst "lib/$abi/lib${NAME_LIB_UNICODECONVERTER}.so"
            pickFirst "lib/$abi/lib${NAME_LIB_X2T}.so"
            pickFirst "lib/$abi/lib${NAME_LIB_XPSFILE}.so"
            pickFirst "lib/$abi/lib${NAME_LIB_FB2FILE}.so"
            pickFirst "lib/$abi/lib${NAME_LIB_EPUBFILE}.so"
            pickFirst "lib/$abi/lib${NAME_LIB}.so"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:1.2.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}



/*
* Check the path for existence,
* otherwise get the path relative to the current project,
* otherwise the error is in the path
* */
def getProjectPath(String path, Boolean isRelativeCreate = false) {
    def absolutePath = file(path)
    def relativePath = file("${file('.').absolutePath}/$path")
    //def relativePath = file("${rootProject.projectDir}/path")

    if (absolutePath.exists() && absolutePath.isDirectory()) {
        return absolutePath.toString().replaceAll("\\\\", "/")
    } else if ((relativePath.exists() && relativePath.isDirectory()) || (isRelativeCreate && relativePath.mkdirs())) {
        return relativePath.toString().replaceAll("\\\\", "/")
    }

    throw new GradleException("getProjectPath($path) - path doesn't exist...")
}

task copyIcuDatFiles {
    doLast {

        println ""
        println "------------------------- ICUDATFILES (task copyIcuDatFiles()) -------------------------"

        def pathAssets = "${file('.').absolutePath}/src/main/assets/icu"
        if (file(pathAssets).exists()) {
            println "IcuDatFiles already exist."
            println "Delete ${pathAssets} folder for update icuDatFiles."
            return
        }

        if (!project.hasProperty('PATH_SRC_ICU_DAT_FILE')) {
            throw new GradleException("Property PATH_SRC_ICU_DAT_FILE with core repository path doesn't exist...")
        }

        if (!project.hasProperty('PATH_SRC_ICU_V8_DAT_FILE')) {
            throw new GradleException("Property PATH_SRC_ICU_V8_DAT_FILE with core repository path doesn't exist...")
        }

        def pathIcuDatFiles = PATH_SRC_ICU_DAT_FILE

        def pathIcuV8DatFiles = PATH_SRC_ICU_V8_DAT_FILE

        if (!file(pathIcuDatFiles).exists()) {
            throw new GradleException("Path with core repository doesn't exist...")
        }

        if (!file(pathIcuV8DatFiles).exists()) {
            throw new GradleException("Path with core repository doesn't exist...")
        }

        copy {
            println "\nCopy dat files..."
            eachFile { println it.file }
            from pathIcuDatFiles, pathIcuV8DatFiles
            into pathAssets
        }
    }
}

preBuild.dependsOn copyIcuDatFiles